Add-Type @"
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Windows.Forms;

public class KeyboardListener
{
    // Declare the delegate for the hook callback
    public delegate IntPtr HookProc(int nCode, IntPtr wParam, IntPtr lParam);

    // Import necessary functions from user32.dll
    [DllImport("user32.dll")]
    public static extern IntPtr SetWindowsHookEx(int idHook, HookProc lpfn, IntPtr hMod, uint dwThreadId);
    
    [DllImport("user32.dll")]
    public static extern bool UnhookWindowsHookEx(IntPtr hhk);
    
    [DllImport("user32.dll")]
    public static extern IntPtr CallNextHookEx(IntPtr hhk, int nCode, IntPtr wParam, IntPtr lParam);

    // Key codes for the arrow keys
    private const int WH_KEYBOARD_LL = 13;
    private const int WM_KEYDOWN = 0x0100;
    private const int VK_UP = 0x26;
    private const int VK_DOWN = 0x28;
    private const int VK_LEFT = 0x25;
    private const int VK_RIGHT = 0x27;

    // Hook handle
    private static IntPtr _hookID = IntPtr.Zero;
    public static void Main()
    {
        _hookID = SetHook(HookCallback);
        Application.Run(); // Keep the application running to listen for events
        UnhookWindowsHookEx(_hookID);
    }

    private static IntPtr SetHook(HookProc proc)
    {
        using (Process curProcess = Process.GetCurrentProcess())
        using (ProcessModule curModule = curProcess.MainModule)
        {
            return SetWindowsHookEx(WH_KEYBOARD_LL, proc, GetModuleHandle(curModule.ModuleName), 0);
        }
    }

    private static IntPtr HookCallback(int nCode, IntPtr wParam, IntPtr lParam)
    {
        if (nCode >= 0 && wParam == (IntPtr)WM_KEYDOWN)
        {
            int vkCode = Marshal.ReadInt32(lParam);
            switch (vkCode)
            {
                case VK_UP:
                    Console.WriteLine("Up arrow key pressed.");
                    break;
                case VK_DOWN:
                    Console.WriteLine("Down arrow key pressed.");
                    break;
                case VK_LEFT:
                    Console.WriteLine("Left arrow key pressed.");
                    break;
                case VK_RIGHT:
                    Console.WriteLine("Right arrow key pressed.");
                    break;
            }
        }
        return CallNextHookEx(_hookID, nCode, wParam, lParam);
    }

    [DllImport("kernel32.dll", SetLastError = true)]
    private static extern IntPtr GetModuleHandle(string lpModuleName);
}
"@

[KeyboardListener]::Main()
